//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from Expr.g4 by ANTLR 4.13.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.2")]
[System.CLSCompliant(false)]
public partial class ExprParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, ID=17, 
		NUMBER=18, WS=19;
	public const int
		RULE_prog = 0, RULE_expr = 1, RULE_func = 2;
	public static readonly string[] ruleNames = {
		"prog", "expr", "func"
	};

	private static readonly string[] _LiteralNames = {
		null, "'^'", "'/'", "'*'", "'+'", "'-'", "'sqrt'", "'y='", "'('", "')'", 
		"'s='", "'sin'", "'cos'", "'tan'", "'log'", "'ln'", "'e^'", "'x'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, "ID", "NUMBER", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Expr.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static ExprParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public ExprParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public ExprParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ProgContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(ExprParser.Eof, 0); }
		public ProgContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_prog; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IExprListener typedListener = listener as IExprListener;
			if (typedListener != null) typedListener.EnterProg(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IExprListener typedListener = listener as IExprListener;
			if (typedListener != null) typedListener.ExitProg(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExprVisitor<TResult> typedVisitor = visitor as IExprVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProg(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProgContext prog() {
		ProgContext _localctx = new ProgContext(Context, State);
		EnterRule(_localctx, 0, RULE_prog);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6;
			expr(0);
			State = 7;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExprContext : ParserRuleContext {
		public ExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expr; } }
	 
		public ExprContext() { }
		public virtual void CopyFrom(ExprContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class SemplificazioneEspressioneContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public SemplificazioneEspressioneContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IExprListener typedListener = listener as IExprListener;
			if (typedListener != null) typedListener.EnterSemplificazioneEspressione(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IExprListener typedListener = listener as IExprListener;
			if (typedListener != null) typedListener.ExitSemplificazioneEspressione(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExprVisitor<TResult> typedVisitor = visitor as IExprVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSemplificazioneEspressione(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ParentesiEspressioneContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ParentesiEspressioneContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IExprListener typedListener = listener as IExprListener;
			if (typedListener != null) typedListener.EnterParentesiEspressione(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IExprListener typedListener = listener as IExprListener;
			if (typedListener != null) typedListener.ExitParentesiEspressione(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExprVisitor<TResult> typedVisitor = visitor as IExprVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParentesiEspressione(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MoltiplicazioneEspressioneContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public MoltiplicazioneEspressioneContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IExprListener typedListener = listener as IExprListener;
			if (typedListener != null) typedListener.EnterMoltiplicazioneEspressione(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IExprListener typedListener = listener as IExprListener;
			if (typedListener != null) typedListener.ExitMoltiplicazioneEspressione(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExprVisitor<TResult> typedVisitor = visitor as IExprVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMoltiplicazioneEspressione(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PotenzaEspressioneContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public PotenzaEspressioneContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IExprListener typedListener = listener as IExprListener;
			if (typedListener != null) typedListener.EnterPotenzaEspressione(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IExprListener typedListener = listener as IExprListener;
			if (typedListener != null) typedListener.ExitPotenzaEspressione(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExprVisitor<TResult> typedVisitor = visitor as IExprVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPotenzaEspressione(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SommaEspressioneContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public SommaEspressioneContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IExprListener typedListener = listener as IExprListener;
			if (typedListener != null) typedListener.EnterSommaEspressione(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IExprListener typedListener = listener as IExprListener;
			if (typedListener != null) typedListener.ExitSommaEspressione(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExprVisitor<TResult> typedVisitor = visitor as IExprVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSommaEspressione(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SottrazioneEspressioneContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public SottrazioneEspressioneContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IExprListener typedListener = listener as IExprListener;
			if (typedListener != null) typedListener.EnterSottrazioneEspressione(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IExprListener typedListener = listener as IExprListener;
			if (typedListener != null) typedListener.ExitSottrazioneEspressione(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExprVisitor<TResult> typedVisitor = visitor as IExprVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSottrazioneEspressione(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CostanteEspressioneContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(ExprParser.ID, 0); }
		public CostanteEspressioneContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IExprListener typedListener = listener as IExprListener;
			if (typedListener != null) typedListener.EnterCostanteEspressione(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IExprListener typedListener = listener as IExprListener;
			if (typedListener != null) typedListener.ExitCostanteEspressione(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExprVisitor<TResult> typedVisitor = visitor as IExprVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCostanteEspressione(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class RadiceEspressioneContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public RadiceEspressioneContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IExprListener typedListener = listener as IExprListener;
			if (typedListener != null) typedListener.EnterRadiceEspressione(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IExprListener typedListener = listener as IExprListener;
			if (typedListener != null) typedListener.ExitRadiceEspressione(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExprVisitor<TResult> typedVisitor = visitor as IExprVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRadiceEspressione(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DerivataEspressioneContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public DerivataEspressioneContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IExprListener typedListener = listener as IExprListener;
			if (typedListener != null) typedListener.EnterDerivataEspressione(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IExprListener typedListener = listener as IExprListener;
			if (typedListener != null) typedListener.ExitDerivataEspressione(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExprVisitor<TResult> typedVisitor = visitor as IExprVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDerivataEspressione(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NumNegContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMBER() { return GetToken(ExprParser.NUMBER, 0); }
		public NumNegContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IExprListener typedListener = listener as IExprListener;
			if (typedListener != null) typedListener.EnterNumNeg(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IExprListener typedListener = listener as IExprListener;
			if (typedListener != null) typedListener.ExitNumNeg(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExprVisitor<TResult> typedVisitor = visitor as IExprVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumNeg(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DivisioneEspressioneContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public DivisioneEspressioneContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IExprListener typedListener = listener as IExprListener;
			if (typedListener != null) typedListener.EnterDivisioneEspressione(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IExprListener typedListener = listener as IExprListener;
			if (typedListener != null) typedListener.ExitDivisioneEspressione(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExprVisitor<TResult> typedVisitor = visitor as IExprVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDivisioneEspressione(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FunzioneEspressioneContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public FuncContext func() {
			return GetRuleContext<FuncContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public FunzioneEspressioneContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IExprListener typedListener = listener as IExprListener;
			if (typedListener != null) typedListener.EnterFunzioneEspressione(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IExprListener typedListener = listener as IExprListener;
			if (typedListener != null) typedListener.ExitFunzioneEspressione(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExprVisitor<TResult> typedVisitor = visitor as IExprVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunzioneEspressione(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FuncNegContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public FuncContext func() {
			return GetRuleContext<FuncContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public FuncNegContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IExprListener typedListener = listener as IExprListener;
			if (typedListener != null) typedListener.EnterFuncNeg(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IExprListener typedListener = listener as IExprListener;
			if (typedListener != null) typedListener.ExitFuncNeg(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExprVisitor<TResult> typedVisitor = visitor as IExprVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFuncNeg(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NumeroEspressioneContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMBER() { return GetToken(ExprParser.NUMBER, 0); }
		public NumeroEspressioneContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IExprListener typedListener = listener as IExprListener;
			if (typedListener != null) typedListener.EnterNumeroEspressione(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IExprListener typedListener = listener as IExprListener;
			if (typedListener != null) typedListener.ExitNumeroEspressione(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExprVisitor<TResult> typedVisitor = visitor as IExprVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumeroEspressione(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExprContext expr() {
		return expr(0);
	}

	private ExprContext expr(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExprContext _localctx = new ExprContext(Context, _parentState);
		ExprContext _prevctx = _localctx;
		int _startState = 2;
		EnterRecursionRule(_localctx, 2, RULE_expr, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 39;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,0,Context) ) {
			case 1:
				{
				_localctx = new DerivataEspressioneContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 10;
				Match(T__6);
				State = 11;
				Match(T__7);
				State = 12;
				expr(0);
				State = 13;
				Match(T__8);
				}
				break;
			case 2:
				{
				_localctx = new SemplificazioneEspressioneContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 15;
				Match(T__9);
				State = 16;
				Match(T__7);
				State = 17;
				expr(0);
				State = 18;
				Match(T__8);
				}
				break;
			case 3:
				{
				_localctx = new FunzioneEspressioneContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 20;
				func();
				State = 21;
				Match(T__7);
				State = 22;
				expr(0);
				State = 23;
				Match(T__8);
				}
				break;
			case 4:
				{
				_localctx = new ParentesiEspressioneContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 25;
				Match(T__7);
				State = 26;
				expr(0);
				State = 27;
				Match(T__8);
				}
				break;
			case 5:
				{
				_localctx = new NumeroEspressioneContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 29;
				Match(NUMBER);
				}
				break;
			case 6:
				{
				_localctx = new NumNegContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 30;
				Match(T__4);
				State = 31;
				Match(NUMBER);
				}
				break;
			case 7:
				{
				_localctx = new FuncNegContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 32;
				Match(T__4);
				State = 33;
				func();
				State = 34;
				Match(T__7);
				State = 35;
				expr(0);
				State = 36;
				Match(T__8);
				}
				break;
			case 8:
				{
				_localctx = new CostanteEspressioneContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 38;
				Match(ID);
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 61;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,2,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 59;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,1,Context) ) {
					case 1:
						{
						_localctx = new PotenzaEspressioneContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 41;
						if (!(Precpred(Context, 14))) throw new FailedPredicateException(this, "Precpred(Context, 14)");
						State = 42;
						Match(T__0);
						State = 43;
						expr(15);
						}
						break;
					case 2:
						{
						_localctx = new DivisioneEspressioneContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 44;
						if (!(Precpred(Context, 13))) throw new FailedPredicateException(this, "Precpred(Context, 13)");
						State = 45;
						Match(T__1);
						State = 46;
						expr(14);
						}
						break;
					case 3:
						{
						_localctx = new MoltiplicazioneEspressioneContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 47;
						if (!(Precpred(Context, 12))) throw new FailedPredicateException(this, "Precpred(Context, 12)");
						State = 48;
						Match(T__2);
						State = 49;
						expr(13);
						}
						break;
					case 4:
						{
						_localctx = new SommaEspressioneContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 50;
						if (!(Precpred(Context, 11))) throw new FailedPredicateException(this, "Precpred(Context, 11)");
						State = 51;
						Match(T__3);
						State = 52;
						expr(12);
						}
						break;
					case 5:
						{
						_localctx = new SottrazioneEspressioneContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 53;
						if (!(Precpred(Context, 10))) throw new FailedPredicateException(this, "Precpred(Context, 10)");
						State = 54;
						Match(T__4);
						State = 55;
						expr(11);
						}
						break;
					case 6:
						{
						_localctx = new RadiceEspressioneContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 56;
						if (!(Precpred(Context, 9))) throw new FailedPredicateException(this, "Precpred(Context, 9)");
						State = 57;
						Match(T__5);
						State = 58;
						expr(10);
						}
						break;
					}
					} 
				}
				State = 63;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,2,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class FuncContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMBER() { return GetToken(ExprParser.NUMBER, 0); }
		public FuncContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_func; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IExprListener typedListener = listener as IExprListener;
			if (typedListener != null) typedListener.EnterFunc(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IExprListener typedListener = listener as IExprListener;
			if (typedListener != null) typedListener.ExitFunc(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExprVisitor<TResult> typedVisitor = visitor as IExprVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunc(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FuncContext func() {
		FuncContext _localctx = new FuncContext(Context, State);
		EnterRule(_localctx, 4, RULE_func);
		try {
			State = 71;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__10:
				EnterOuterAlt(_localctx, 1);
				{
				State = 64;
				Match(T__10);
				}
				break;
			case T__11:
				EnterOuterAlt(_localctx, 2);
				{
				State = 65;
				Match(T__11);
				}
				break;
			case T__12:
				EnterOuterAlt(_localctx, 3);
				{
				State = 66;
				Match(T__12);
				}
				break;
			case T__13:
				EnterOuterAlt(_localctx, 4);
				{
				State = 67;
				Match(T__13);
				State = 68;
				Match(NUMBER);
				}
				break;
			case T__14:
				EnterOuterAlt(_localctx, 5);
				{
				State = 69;
				Match(T__14);
				}
				break;
			case T__15:
				EnterOuterAlt(_localctx, 6);
				{
				State = 70;
				Match(T__15);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 1: return expr_sempred((ExprContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expr_sempred(ExprContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 14);
		case 1: return Precpred(Context, 13);
		case 2: return Precpred(Context, 12);
		case 3: return Precpred(Context, 11);
		case 4: return Precpred(Context, 10);
		case 5: return Precpred(Context, 9);
		}
		return true;
	}

	private static int[] _serializedATN = {
		4,1,19,74,2,0,7,0,2,1,7,1,2,2,7,2,1,0,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,
		1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
		1,1,1,1,1,1,1,1,1,1,1,1,1,3,1,40,8,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
		1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,5,1,60,8,1,10,1,12,1,63,9,1,1,2,
		1,2,1,2,1,2,1,2,1,2,1,2,3,2,72,8,2,1,2,0,1,2,3,0,2,4,0,0,88,0,6,1,0,0,
		0,2,39,1,0,0,0,4,71,1,0,0,0,6,7,3,2,1,0,7,8,5,0,0,1,8,1,1,0,0,0,9,10,6,
		1,-1,0,10,11,5,7,0,0,11,12,5,8,0,0,12,13,3,2,1,0,13,14,5,9,0,0,14,40,1,
		0,0,0,15,16,5,10,0,0,16,17,5,8,0,0,17,18,3,2,1,0,18,19,5,9,0,0,19,40,1,
		0,0,0,20,21,3,4,2,0,21,22,5,8,0,0,22,23,3,2,1,0,23,24,5,9,0,0,24,40,1,
		0,0,0,25,26,5,8,0,0,26,27,3,2,1,0,27,28,5,9,0,0,28,40,1,0,0,0,29,40,5,
		18,0,0,30,31,5,5,0,0,31,40,5,18,0,0,32,33,5,5,0,0,33,34,3,4,2,0,34,35,
		5,8,0,0,35,36,3,2,1,0,36,37,5,9,0,0,37,40,1,0,0,0,38,40,5,17,0,0,39,9,
		1,0,0,0,39,15,1,0,0,0,39,20,1,0,0,0,39,25,1,0,0,0,39,29,1,0,0,0,39,30,
		1,0,0,0,39,32,1,0,0,0,39,38,1,0,0,0,40,61,1,0,0,0,41,42,10,14,0,0,42,43,
		5,1,0,0,43,60,3,2,1,15,44,45,10,13,0,0,45,46,5,2,0,0,46,60,3,2,1,14,47,
		48,10,12,0,0,48,49,5,3,0,0,49,60,3,2,1,13,50,51,10,11,0,0,51,52,5,4,0,
		0,52,60,3,2,1,12,53,54,10,10,0,0,54,55,5,5,0,0,55,60,3,2,1,11,56,57,10,
		9,0,0,57,58,5,6,0,0,58,60,3,2,1,10,59,41,1,0,0,0,59,44,1,0,0,0,59,47,1,
		0,0,0,59,50,1,0,0,0,59,53,1,0,0,0,59,56,1,0,0,0,60,63,1,0,0,0,61,59,1,
		0,0,0,61,62,1,0,0,0,62,3,1,0,0,0,63,61,1,0,0,0,64,72,5,11,0,0,65,72,5,
		12,0,0,66,72,5,13,0,0,67,68,5,14,0,0,68,72,5,18,0,0,69,72,5,15,0,0,70,
		72,5,16,0,0,71,64,1,0,0,0,71,65,1,0,0,0,71,66,1,0,0,0,71,67,1,0,0,0,71,
		69,1,0,0,0,71,70,1,0,0,0,72,5,1,0,0,0,4,39,59,61,71
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
