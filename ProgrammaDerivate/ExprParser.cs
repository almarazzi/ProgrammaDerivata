//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from Expr.g4 by ANTLR 4.13.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.2")]
[System.CLSCompliant(false)]
public partial class ExprParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, ID=8, NUMBER=9, 
		WS=10;
	public const int
		RULE_expr = 0, RULE_operazione = 1, RULE_numeri = 2;
	public static readonly string[] ruleNames = {
		"expr", "operazione", "numeri"
	};

	private static readonly string[] _LiteralNames = {
		null, "'*'", "'/'", "'^'", "'+'", "'-'", "'('", "')'", "'x'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, "ID", "NUMBER", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Expr.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static ExprParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public ExprParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public ExprParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ExprContext : ParserRuleContext {
		public ExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expr; } }
	 
		public ExprContext() { }
		public virtual void CopyFrom(ExprContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class DivPerContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public NumeriContext numeri() {
			return GetRuleContext<NumeriContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OperazioneContext operazione() {
			return GetRuleContext<OperazioneContext>(0);
		}
		public DivPerContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IExprListener typedListener = listener as IExprListener;
			if (typedListener != null) typedListener.EnterDivPer(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IExprListener typedListener = listener as IExprListener;
			if (typedListener != null) typedListener.ExitDivPer(this);
		}
	}

	[RuleVersion(0)]
	public ExprContext expr() {
		ExprContext _localctx = new ExprContext(Context, State);
		EnterRule(_localctx, 0, RULE_expr);
		int _la;
		try {
			_localctx = new DivPerContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			State = 6;
			numeri(0);
			State = 7;
			_la = TokenStream.LA(1);
			if ( !(_la==T__0 || _la==T__1) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 8;
			operazione();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OperazioneContext : ParserRuleContext {
		public OperazioneContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operazione; } }
	 
		public OperazioneContext() { }
		public virtual void CopyFrom(OperazioneContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class PotenzaContext : OperazioneContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(ExprParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NumeriContext numeri() {
			return GetRuleContext<NumeriContext>(0);
		}
		public PotenzaContext(OperazioneContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IExprListener typedListener = listener as IExprListener;
			if (typedListener != null) typedListener.EnterPotenza(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IExprListener typedListener = listener as IExprListener;
			if (typedListener != null) typedListener.ExitPotenza(this);
		}
	}

	[RuleVersion(0)]
	public OperazioneContext operazione() {
		OperazioneContext _localctx = new OperazioneContext(Context, State);
		EnterRule(_localctx, 2, RULE_operazione);
		int _la;
		try {
			_localctx = new PotenzaContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			State = 10;
			Match(ID);
			State = 13;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__2) {
				{
				State = 11;
				Match(T__2);
				State = 12;
				numeri(0);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NumeriContext : ParserRuleContext {
		public NumeriContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_numeri; } }
	 
		public NumeriContext() { }
		public virtual void CopyFrom(NumeriContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class NegativiNumeriContext : NumeriContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMBER() { return GetToken(ExprParser.NUMBER, 0); }
		public NegativiNumeriContext(NumeriContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IExprListener typedListener = listener as IExprListener;
			if (typedListener != null) typedListener.EnterNegativiNumeri(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IExprListener typedListener = listener as IExprListener;
			if (typedListener != null) typedListener.ExitNegativiNumeri(this);
		}
	}
	public partial class SommaMenointerniContext : NumeriContext {
		public IToken op;
		[System.Diagnostics.DebuggerNonUserCode] public NumeriContext[] numeri() {
			return GetRuleContexts<NumeriContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NumeriContext numeri(int i) {
			return GetRuleContext<NumeriContext>(i);
		}
		public SommaMenointerniContext(NumeriContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IExprListener typedListener = listener as IExprListener;
			if (typedListener != null) typedListener.EnterSommaMenointerni(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IExprListener typedListener = listener as IExprListener;
			if (typedListener != null) typedListener.ExitSommaMenointerni(this);
		}
	}
	public partial class NumberContext : NumeriContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMBER() { return GetToken(ExprParser.NUMBER, 0); }
		public NumberContext(NumeriContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IExprListener typedListener = listener as IExprListener;
			if (typedListener != null) typedListener.EnterNumber(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IExprListener typedListener = listener as IExprListener;
			if (typedListener != null) typedListener.ExitNumber(this);
		}
	}
	public partial class ParentContext : NumeriContext {
		[System.Diagnostics.DebuggerNonUserCode] public NumeriContext numeri() {
			return GetRuleContext<NumeriContext>(0);
		}
		public ParentContext(NumeriContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IExprListener typedListener = listener as IExprListener;
			if (typedListener != null) typedListener.EnterParent(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IExprListener typedListener = listener as IExprListener;
			if (typedListener != null) typedListener.ExitParent(this);
		}
	}
	public partial class DivPerinterniContext : NumeriContext {
		public IToken op;
		[System.Diagnostics.DebuggerNonUserCode] public NumeriContext[] numeri() {
			return GetRuleContexts<NumeriContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NumeriContext numeri(int i) {
			return GetRuleContext<NumeriContext>(i);
		}
		public DivPerinterniContext(NumeriContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IExprListener typedListener = listener as IExprListener;
			if (typedListener != null) typedListener.EnterDivPerinterni(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IExprListener typedListener = listener as IExprListener;
			if (typedListener != null) typedListener.ExitDivPerinterni(this);
		}
	}

	[RuleVersion(0)]
	public NumeriContext numeri() {
		return numeri(0);
	}

	private NumeriContext numeri(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		NumeriContext _localctx = new NumeriContext(Context, _parentState);
		NumeriContext _prevctx = _localctx;
		int _startState = 4;
		EnterRecursionRule(_localctx, 4, RULE_numeri, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 23;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__4:
				{
				_localctx = new NegativiNumeriContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 16;
				Match(T__4);
				State = 17;
				Match(NUMBER);
				}
				break;
			case NUMBER:
				{
				_localctx = new NumberContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 18;
				Match(NUMBER);
				}
				break;
			case T__5:
				{
				_localctx = new ParentContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 19;
				Match(T__5);
				State = 20;
				numeri(0);
				State = 21;
				Match(T__6);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 33;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,3,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 31;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,2,Context) ) {
					case 1:
						{
						_localctx = new DivPerinterniContext(new NumeriContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_numeri);
						State = 25;
						if (!(Precpred(Context, 5))) throw new FailedPredicateException(this, "Precpred(Context, 5)");
						State = 26;
						((DivPerinterniContext)_localctx).op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==T__0 || _la==T__1) ) {
							((DivPerinterniContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 27;
						numeri(6);
						}
						break;
					case 2:
						{
						_localctx = new SommaMenointerniContext(new NumeriContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_numeri);
						State = 28;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 29;
						((SommaMenointerniContext)_localctx).op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==T__3 || _la==T__4) ) {
							((SommaMenointerniContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 30;
						numeri(5);
						}
						break;
					}
					} 
				}
				State = 35;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,3,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 2: return numeri_sempred((NumeriContext)_localctx, predIndex);
		}
		return true;
	}
	private bool numeri_sempred(NumeriContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 5);
		case 1: return Precpred(Context, 4);
		}
		return true;
	}

	private static int[] _serializedATN = {
		4,1,10,37,2,0,7,0,2,1,7,1,2,2,7,2,1,0,1,0,1,0,1,0,1,1,1,1,1,1,3,1,14,8,
		1,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,3,2,24,8,2,1,2,1,2,1,2,1,2,1,2,1,2,5,
		2,32,8,2,10,2,12,2,35,9,2,1,2,0,1,4,3,0,2,4,0,2,1,0,1,2,1,0,4,5,38,0,6,
		1,0,0,0,2,10,1,0,0,0,4,23,1,0,0,0,6,7,3,4,2,0,7,8,7,0,0,0,8,9,3,2,1,0,
		9,1,1,0,0,0,10,13,5,8,0,0,11,12,5,3,0,0,12,14,3,4,2,0,13,11,1,0,0,0,13,
		14,1,0,0,0,14,3,1,0,0,0,15,16,6,2,-1,0,16,17,5,5,0,0,17,24,5,9,0,0,18,
		24,5,9,0,0,19,20,5,6,0,0,20,21,3,4,2,0,21,22,5,7,0,0,22,24,1,0,0,0,23,
		15,1,0,0,0,23,18,1,0,0,0,23,19,1,0,0,0,24,33,1,0,0,0,25,26,10,5,0,0,26,
		27,7,0,0,0,27,32,3,4,2,6,28,29,10,4,0,0,29,30,7,1,0,0,30,32,3,4,2,5,31,
		25,1,0,0,0,31,28,1,0,0,0,32,35,1,0,0,0,33,31,1,0,0,0,33,34,1,0,0,0,34,
		5,1,0,0,0,35,33,1,0,0,0,4,13,23,31,33
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
