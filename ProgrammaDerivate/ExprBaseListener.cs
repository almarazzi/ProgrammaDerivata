//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from Expr.g4 by ANTLR 4.13.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419


using Antlr4.Runtime.Misc;
using IErrorNode = Antlr4.Runtime.Tree.IErrorNode;
using ITerminalNode = Antlr4.Runtime.Tree.ITerminalNode;
using IToken = Antlr4.Runtime.IToken;
using ParserRuleContext = Antlr4.Runtime.ParserRuleContext;

/// <summary>
/// This class provides an empty implementation of <see cref="IExprListener"/>,
/// which can be extended to create a listener which only needs to handle a subset
/// of the available methods.
/// </summary>
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.2")]
[System.Diagnostics.DebuggerNonUserCode]
[System.CLSCompliant(false)]
public partial class ExprBaseListener : IExprListener {
	/// <summary>
	/// Enter a parse tree produced by <see cref="ExprParser.prog"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterProg([NotNull] ExprParser.ProgContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="ExprParser.prog"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitProg([NotNull] ExprParser.ProgContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>ParentesiEspressione</c>
	/// labeled alternative in <see cref="ExprParser.expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterParentesiEspressione([NotNull] ExprParser.ParentesiEspressioneContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>ParentesiEspressione</c>
	/// labeled alternative in <see cref="ExprParser.expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitParentesiEspressione([NotNull] ExprParser.ParentesiEspressioneContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>MoltiplicazioneEspressione</c>
	/// labeled alternative in <see cref="ExprParser.expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterMoltiplicazioneEspressione([NotNull] ExprParser.MoltiplicazioneEspressioneContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>MoltiplicazioneEspressione</c>
	/// labeled alternative in <see cref="ExprParser.expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitMoltiplicazioneEspressione([NotNull] ExprParser.MoltiplicazioneEspressioneContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>CostanteEspressione</c>
	/// labeled alternative in <see cref="ExprParser.expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterCostanteEspressione([NotNull] ExprParser.CostanteEspressioneContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>CostanteEspressione</c>
	/// labeled alternative in <see cref="ExprParser.expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitCostanteEspressione([NotNull] ExprParser.CostanteEspressioneContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>RadiceEspressione</c>
	/// labeled alternative in <see cref="ExprParser.expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterRadiceEspressione([NotNull] ExprParser.RadiceEspressioneContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>RadiceEspressione</c>
	/// labeled alternative in <see cref="ExprParser.expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitRadiceEspressione([NotNull] ExprParser.RadiceEspressioneContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>DerivataEspressione</c>
	/// labeled alternative in <see cref="ExprParser.expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterDerivataEspressione([NotNull] ExprParser.DerivataEspressioneContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>DerivataEspressione</c>
	/// labeled alternative in <see cref="ExprParser.expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitDerivataEspressione([NotNull] ExprParser.DerivataEspressioneContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>DivisioneEspressione</c>
	/// labeled alternative in <see cref="ExprParser.expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterDivisioneEspressione([NotNull] ExprParser.DivisioneEspressioneContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>DivisioneEspressione</c>
	/// labeled alternative in <see cref="ExprParser.expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitDivisioneEspressione([NotNull] ExprParser.DivisioneEspressioneContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>PotenzaEspressione</c>
	/// labeled alternative in <see cref="ExprParser.expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterPotenzaEspressione([NotNull] ExprParser.PotenzaEspressioneContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>PotenzaEspressione</c>
	/// labeled alternative in <see cref="ExprParser.expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitPotenzaEspressione([NotNull] ExprParser.PotenzaEspressioneContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>NumeroNeg</c>
	/// labeled alternative in <see cref="ExprParser.expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterNumeroNeg([NotNull] ExprParser.NumeroNegContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>NumeroNeg</c>
	/// labeled alternative in <see cref="ExprParser.expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitNumeroNeg([NotNull] ExprParser.NumeroNegContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>SommaEspressione</c>
	/// labeled alternative in <see cref="ExprParser.expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterSommaEspressione([NotNull] ExprParser.SommaEspressioneContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>SommaEspressione</c>
	/// labeled alternative in <see cref="ExprParser.expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitSommaEspressione([NotNull] ExprParser.SommaEspressioneContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>SottrazioneEspressione</c>
	/// labeled alternative in <see cref="ExprParser.expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterSottrazioneEspressione([NotNull] ExprParser.SottrazioneEspressioneContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>SottrazioneEspressione</c>
	/// labeled alternative in <see cref="ExprParser.expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitSottrazioneEspressione([NotNull] ExprParser.SottrazioneEspressioneContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>FunzioneEspressione</c>
	/// labeled alternative in <see cref="ExprParser.expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterFunzioneEspressione([NotNull] ExprParser.FunzioneEspressioneContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>FunzioneEspressione</c>
	/// labeled alternative in <see cref="ExprParser.expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitFunzioneEspressione([NotNull] ExprParser.FunzioneEspressioneContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>NumeroEspressione</c>
	/// labeled alternative in <see cref="ExprParser.expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterNumeroEspressione([NotNull] ExprParser.NumeroEspressioneContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>NumeroEspressione</c>
	/// labeled alternative in <see cref="ExprParser.expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitNumeroEspressione([NotNull] ExprParser.NumeroEspressioneContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="ExprParser.func"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterFunc([NotNull] ExprParser.FuncContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="ExprParser.func"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitFunc([NotNull] ExprParser.FuncContext context) { }

	/// <inheritdoc/>
	/// <remarks>The default implementation does nothing.</remarks>
	public virtual void EnterEveryRule([NotNull] ParserRuleContext context) { }
	/// <inheritdoc/>
	/// <remarks>The default implementation does nothing.</remarks>
	public virtual void ExitEveryRule([NotNull] ParserRuleContext context) { }
	/// <inheritdoc/>
	/// <remarks>The default implementation does nothing.</remarks>
	public virtual void VisitTerminal([NotNull] ITerminalNode node) { }
	/// <inheritdoc/>
	/// <remarks>The default implementation does nothing.</remarks>
	public virtual void VisitErrorNode([NotNull] IErrorNode node) { }
}
